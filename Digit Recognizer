import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import tensorflow as tf
import polars as pl

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
df_train = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')
df_test = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')
print("training data shape: "+str(df_train.shape))
print("test data shape: "+str(df_test.shape))
df_train.head()
df_test.head()
X_train= df_train.drop('label',axis=1)
y_train = df_train.iloc[:,0].to_numpy()
X_train = X_train/255.0
X_test = df_test/255.0
X_train = np.reshape(X_train.to_numpy(),(42000,28,28))
X_test = np.reshape(X_test.to_numpy(),(28000,28,28))
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28,28)),
  tf.keras.layers.Dense(256, activation='relu'),
  tf.keras.layers.Dropout(0.15),
  tf.keras.layers.Dense(15)
])
loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)
model.compile(optimizer='adam',
              loss=loss_fn,
              metrics=['accuracy'])
model.fit(X_train, y_train, epochs=8)
y_test = model.predict(X_test, verbose=2)
y_pred = tf.argmax(y_test, axis=1)
submission = pl.DataFrame([
    pl.Series('ImageId', range(1, len(y_pred)+1)),
    pl.Series('Label', y_pred.numpy())
])
submission.write_csv('submission.csv')
